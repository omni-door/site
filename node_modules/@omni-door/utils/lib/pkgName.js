"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var chalk_1 = __importDefault(require("chalk"));
var validate_npm_package_name_1 = __importDefault(require("validate-npm-package-name"));
var logger_1 = require("./logger");
function pkgName(name, noExit) {
    var validationResult = validate_npm_package_name_1.default(name);
    if (!validationResult.validForNewPackages) {
        var pkjName = chalk_1.default.green("\"" + name + "\"");
        logger_1.logWarn("\u6839\u636E npm \u7684\u89C4\u5B9A\uFF0C" + pkjName + " \u662F\u975E\u6CD5\u7684\u9879\u76EE\u540D(The " + pkjName + " is invalid project name because of npm naming restrictions):");
        __spreadArrays((validationResult.errors || []), (validationResult.warnings || [])).forEach(function (e, k) { return logger_1.logWarn(k + 1 + ". " + e); });
        !noExit && process.exit(0);
        return false;
    }
    return true;
}
exports.default = pkgName;
