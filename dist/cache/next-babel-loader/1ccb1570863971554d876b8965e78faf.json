{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nconst layoutProps = {};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, `文档`), mdx(\"h2\", null, `支持的项目类型简介`), mdx(\"h3\", null, `SPA 应用`), mdx(\"ul\", {\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `基于 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/\"\n  }), `React`), ` UI 框架`)), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `基于 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reacttraining.com/react-router/web/example/basic\"\n  }), `React-Router`), ` 实现前端路由`)), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `使用 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.typescriptlang.org/\"\n  }), `typescript`), ` 进行开发`)), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `使用 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://webpack.js.org/\"\n  }), `webpack`), ` 打包`)), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `遵守 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://eslint.org/\"\n  }), `eslint`), ` 规范`)), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `遵守 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stylelint.io/\"\n  }), `stylelint`), ` 规范`)), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `采用 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://prettier.io/docs/en/install.html\"\n  }), `prettier`), ` 美化代码格式`)), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `无缝支持 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/css-modules/css-modules\"\n  }), `CSS Modules`), ` 和 全局CSS，无需额外配置`), mdx(\"p\", {\n    parentName: \"li\"\n  }, `……`))), mdx(\"h3\", null, `SSR 应用`), mdx(\"ul\", {\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `基于 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/\"\n  }), `React`), ` 框架`)), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `基于 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nextjs.org/\"\n  }), `nextjs`), ` 企业级高性能 Node 框架`)), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `使用 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.typescriptlang.org/\"\n  }), `typescript`), ` 进行开发`)), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `支持 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://koajs.com/\"\n  }), `koa`), ` 自定义 node 服务`)), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `搜索引擎友好 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://zh.wikipedia.org/wiki/%E6%90%9C%E5%B0%8B%E5%BC%95%E6%93%8E%E6%9C%80%E4%BD%B3%E5%8C%96\"\n  }), `SEO`)), mdx(\"p\", {\n    parentName: \"li\"\n  }, `……`))), mdx(\"h3\", null, `Component 组件(库)项目`), mdx(\"ul\", {\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `支持 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://storybook.js.org/\"\n  }), `storybook`), `、`, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docz.site/\"\n  }), `docz`), `、`, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://react-styleguidist.js.org/\"\n  }), `styleguidist`), ` 多种组件库Demo和文档框架`)), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `基于 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/\"\n  }), `React`), ` 的组件库`)), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `使用 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://jestjs.io/\"\n  }), `Jest`), ` 进行组件的单页测试`)), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `使用 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gulpjs.com/\"\n  }), `gulp`), ` 打包`)), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `使用 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.typescriptlang.org/\"\n  }), `typescript`), ` 进行开发`)), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `遵守 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://eslint.org/\"\n  }), `eslint`), ` 规范`)), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `遵守 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stylelint.io/\"\n  }), `stylelint`), ` 规范`)), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `采用 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://prettier.io/docs/en/install.html\"\n  }), `prettier`), ` 美化代码格式`), mdx(\"p\", {\n    parentName: \"li\"\n  }, `……`))), mdx(\"h3\", null, `Toolkit 工具库项目`), mdx(\"ul\", {\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `基于 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://d.umijs.org/\"\n  }), `dumi`), ` 开发和Demo框架`)), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `使用 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://mochajs.org/\"\n  }), `mocha`), ` 进行Node端的单页测试`)), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `使用 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://karma-runner.github.io/latest/index.html\"\n  }), `karma`), ` 进行浏览器端的单页测试`)), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `使用 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://rollupjs.org/guide/en/\"\n  }), `rollup`), ` 构建项目`)), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `使用 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.typescriptlang.org/\"\n  }), `typescript`), ` 进行开发`)), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `遵守 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://eslint.org/\"\n  }), `eslint`), ` 规范`)), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"input\", _extends({\n    parentName: \"p\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), ` `, `采用 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://prettier.io/docs/en/install.html\"\n  }), `prettier`), ` 美化代码格式`), mdx(\"p\", {\n    parentName: \"li\"\n  }, `……`))), mdx(\"h2\", null, `脚手架命令清单`), mdx(\"p\", null, `你可以在命令行中简单输入 `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `omni -h`), ` 查看所有的命令：`), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), `  Commands:\n\n    init [strategy] [options]  初始化你的项目，[strategy(策略)] 可用是stable(默认) 或 lastst\n    dev [options]              omni dev -p [port]\n    new <module> [options]     omni new [module] [-f | -c]\n    build                      根据 [omni.config.js] 打包构建你的项目\n    release [options]          根据 [omni.config.js] 发布你的项目\n`)), mdx(\"h3\", null, `omni init`), mdx(\"h4\", null, `初始化一个项目`), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), `omni init\n`)), mdx(\"h4\", null, `用最新的依赖@lastest初始化项目`), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), `omni init lastest\n`)), mdx(\"h4\", null, `初始化项目但不安装依赖`), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), `omni init -n\n`)), mdx(\"h4\", null, `套用模板一键初始化项目`), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), `omni init -t [projectName]\n`)), mdx(\"p\", null, `or`), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), `omni init --entire [projectName]\n`)), mdx(\"h4\", null, `选项`), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), `使用: omni init [strategy] [options]\n\nArguments:\n\n  strategy                 stable or latest\n\n  Options:\n    -rb, --react_basic [name]       创建一个最基本的 React 单页应用\n    -rs, --react_standard [name]    创建一个标准的 React 单页应用\n    -re, --react_entire [name]      创建一个全量的 React 单页应用\n    -rS, --react_ssr [name]         创建一个 React SSR 应用\n    -rc, --react_components [name]  创建一个 React 组件库\n    -t, --toolkit [name]            创建一个工具库\n    -n, --no-install                初始化项目不安装任何依赖\n    -P, --path <path>               创建项目的工作路径\n    -h, --help               output usage information\n`)), mdx(\"h3\", null, `omni dev`), mdx(\"h4\", null, `各种用法`), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), `  omni dev\n\n  omni dev -p 8200 // 启动一个端口号为 8200 的开发服务\n\n  omni dev -h dev.domain.com // 启动一个host为 dev.domain.com 的开发服务\n\n\n  omni dev -p 8200 -h dev.domain.com // 启动一个端口号为 8200 且 host为 dev.domain.com 的 开发服务\n\n`)), mdx(\"h4\", null, `选项`), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), `使用: omni dev [options]\n\nomni dev [-p <port>] [-H <host>] [-P <path>]\n\nOptions:\n  -p, --port <port>      根据指定的端口号启动开发服务\n  -H, --hostname <host>  根据指定的hostname启动开发服务\n  -P, --path <path>      启动开发服务的工作路径\n  -h, --help             output usage information\n`)), mdx(\"h3\", null, `omni start`), mdx(\"p\", null, `用法和 `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `omni dev`), ` 略同`), mdx(\"h4\", null, `选项`), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), `使用: omni start [options]\n\nomni start [-p <port>] [-H <host>] [-P <path>]\n\nOptions:\n  -p, --port <port>      根据指定的端口号启动生产服务\n  -H, --hostname <host>  根据指定的hostname启动生产服务\n  -P, --path <path>      启动生产服务的工作路径\n  -h, --help             output usage information\n`)), mdx(\"h3\", null, `omni new`), mdx(\"h4\", null, `各种用法`), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), `  omni new\n\n  omni new Button // 新建一个名为 Button 的组件\n\n  omni new -c // 新建一个类组件\n\n  omni new -c Button // 新建一个名为 Button 的类组件\n`)), mdx(\"h4\", null, `选项`), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), `使用: omni new [name] [options]\n\nomni new [name] [-f | -c] [-P <path>]\n\nArguments:\n\n  module           可选！组件名称。\n\nOptions:\n  -f, --function     创建一个函数组件\n  -c, --class        创建一个类组件\n  -P, --path <path>  创建组件的工作路径\n  -h, --help        output usage information\n`)), mdx(\"h3\", null, `omni build`), mdx(\"h4\", null, `各种用法`), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), `  omni build\n\n  omni build -n // 构建时避开所有预校验\n\n  omni build -c $pathTo/build.config.js // 根据指定路径构建项目\n`)), mdx(\"h4\", null, `选项`), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), `使用: omni build [options]\n\n根据 [omni.config.js] 的 build 字段构建项目\n\nOptions:\n  -c, --config <path>  指定构建的配置文件路径\n  -n, --no-verify      绕过所有预检直接构建\n  -P, --path <path>    构建的工作路径\n  -h, --help           output usage information\n`)), mdx(\"h3\", null, `omni release`), mdx(\"h4\", null, `各种用法`), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), `  omni release\n\n  omni release -n // 发布时避开所有预校验\n\n  omni release -a // 发布时自动迭代版本号\n\n  omni release -i // 发布时忽略版本号的迭代\n\n  omni release -m // 发布时手动输入迭代版本号\n\n  omni release -t // 发布时指定 tag 名\n`)), mdx(\"h4\", null, `选项`), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), `使用: omni release [options]\n\n根据 [omni.config.js] 的 release 字段发布项目\n\nOptions:\n  -a, --automatic         发布并自动迭代版本号\n  -i, --ignore            发布并忽视版本号的迭代\n  -m, --manual <version>  发布并手动指定版本号\n  -t, --tag <tag>         发布时指定tag\n  -n, --no-verify         绕过所有的预检直接发布\n  -P, --path <path>       发布的工作路径\n  -h, --help              output usage information\n`)), mdx(\"h2\", null, `关于 「omni.config.js」 配置文件`), mdx(\"h3\", null, `type 项目类型`), mdx(\"p\", null, `OMNI 会根据不同的项目类型决定整个初始化、构建、创建模板的过程`), mdx(\"p\", null, `目前支持的项目类型有：`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `spa-react - React单页应用`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `ssr-react - React服务端渲染应用`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `component-react - React组件库`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `toolkit - SDK工具包`))), mdx(\"h3\", null, `dev 开发服务`), mdx(\"p\", null, `开发服务基于express，搭配 webpack-dev-middleware、webpack-hot-middleware、http-proxy-middleware 等中间件，实现了热更新、接口代理等常用功能，并提供了中间件的自定义、端口号、log日志输出级别、webpack配置等个性化定制方案。`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `middleware - 中间件配置，参考下面👇的类型：`), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), `{\n  route: string;\n  callback: (req: any, res: any) => Promise<void>;\n}\n`)), mdx(\"p\", {\n    parentName: \"li\"\n  }, `  or`), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), `(params: {\n  ip: string;\n  port: number;\n  host?: string;\n  logLevel: LOGLEVEL;\n  proxyConfig?: (ProxyItem | ProxyFn)[];\n}) => {\n  route: string;\n  callback: (req: any, res: any) => Promise<void>;\n}\n`))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `webpack - 开发服务端webpack配置`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `proxy - 开发服务代理配置`), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), `{\n  route: '/api', // 代理API的本地服务的地址\n  config: {\n    target: 'http://www.api.com/api', // 代理API的实际地址\n    changeOrigin: true // 是否改变host\n  }\n}\n`)), mdx(\"p\", {\n    parentName: \"li\"\n  }, `  or`), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), `(params: {\n  ip: string;\n  port: number;\n  host?: string;\n  logLevel: LOGLEVEL;\n  middlewareConfig?: (MiddlewareItem | MiddlewareFn)[];\n}) => {\n  route: string;\n  config: Config;\n}\n`)), mdx(\"p\", {\n    parentName: \"li\"\n  }, `  更多配置详见 `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/chimurai/http-proxy-middleware\"\n  }), `http-proxy-middleware`))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `port - 开发服务启动的端口号`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `host - 开发服务启动的host`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `https - 开发服务以https协议启动，可自定义 `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `key`), ` 和 `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `cert`))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `serverType - 开发服务的类型`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `logLevel - 开发服务日志输出等级，可选 'debug'、'info'、'warn'、'error'、'silent'`))), mdx(\"h3\", null, `build 构建配置`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `autoRelease - 构建完成后是否自动发布`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `srcDir - 构建资源输入路径`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `outDir - 构建结果输出路径`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `esmDir - 构建结果输出路径(符合es6 module规范)`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `hash - 构建的资源是否加上hash，可选 'contenthash'、'chunkhash'、'hash'(传入true则是contenthash)`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `configuration - 构建阶段的自定义配置回调，返回自定义的配置`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `reserve - 配置未经过打包，但需要保留进构建结果的资源`), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `style - 构建结果是否保留样式文件`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `assets - 构建结果保留其他资源的路径`)))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `preflight - 构建前的飞行检查`), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `typescript - 是否处理ts或tsx文件`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `test - 是否进行单元测试 `)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `eslint - 是否进行eslint检测`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `prettier - 是否进行prettier检测`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `stylelint - 是否进行stylelint检测`))))), mdx(\"h3\", null, `release`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `git - 发布的git仓库地址`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `npm - 发布的npm仓库地址`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `preflight - 发布前的飞行检查`), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `test - 发布前是否进行单元测试`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `eslint - 发布前是否进行eslint检测`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `prettier - 发布前是否进行prettier检测`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `stylelint - 发布前是否进行stylelint检测`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `commitlint - 发布前是否进行commitlint检测`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `branch - 发布前进行分支检测，设置为空字符串则不会检测`))))), mdx(\"h3\", null, `template 新建模板配置`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `root - 生成模板的根路径`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `typescript - 是否创建ts文件`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `test - 是否创建单元测试文件`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `stylesheet - 样式文件类型`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `readme - `, `[true, 'mdx']`, ` (`, `[是否生成ReadMe文件, 创建md 或 mdx文件]`, `)`))), mdx(\"h3\", null, `plugins`), mdx(\"p\", null, `插件集合，插件需满足下面的类型：`), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), `type OmniPlugin = {\n  name: string;\n  stage: PluginStage;\n  handler: PluginHandler;\n};\n\ntype PluginStage = 'new' | 'build' | 'release';\ninterface PluginHandler {\n  (config: Omit<OmniConfig, 'plugins'>): Promise<any>;\n}\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","map":null,"metadata":{},"sourceType":"module"}