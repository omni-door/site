{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createContext, useState, useCallback } from 'react';\nimport locale_cn from '@locale/cn';\nimport locale_en from '@locale/en';\nvar locales = {\n  cn: locale_cn,\n  en: locale_en\n};\nvar initLang = 'cn';\nvar ctxInitState = {\n  lang: initLang,\n  locale: locales[initLang],\n  setLang: function setLang(lang) {\n    return console.warn('初始化未完成');\n  }\n};\nexport var UseLocale = createContext(ctxInitState);\nexport var UseLocaleProvider = function UseLocaleProvider(props) {\n  var _props$lang, _locales;\n\n  var setLang = useCallback(function (lang) {\n    var locale = locales[lang];\n\n    if (!locale) {\n      locale = ctxInitState.locale;\n      lang = ctxInitState.lang;\n    }\n\n    setState(function (states) {\n      return _objectSpread(_objectSpread({}, states), {}, {\n        locale: locale,\n        lang: lang\n      });\n    });\n  }, []);\n  var initState = {\n    lang: (_props$lang = props === null || props === void 0 ? void 0 : props.lang) !== null && _props$lang !== void 0 ? _props$lang : ctxInitState.lang,\n    locale: (_locales = locales[props === null || props === void 0 ? void 0 : props.lang]) !== null && _locales !== void 0 ? _locales : ctxInitState.locale,\n    setLang: setLang\n  };\n\n  var _useState = useState(initState),\n      state = _useState[0],\n      setState = _useState[1];\n\n  return __jsx(UseLocale.Provider, {\n    value: state\n  }, props.children);\n};\nexport default UseLocaleProvider;","map":null,"metadata":{},"sourceType":"module"}