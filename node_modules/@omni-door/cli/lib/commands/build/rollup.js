"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function default_1(config) {
    var ts = config.ts, multiOutput = config.multiOutput, _a = config.srcDir, srcDir = _a === void 0 ? 'src' : _a, _b = config.outDir, outDir = _b === void 0 ? 'lib' : _b, esmDir = config.esmDir, configurationPath = config.configurationPath, _c = config.pkjFieldName, pkjFieldName = _c === void 0 ? 'omni' : _c, _d = config.configFileName, configFileName = _d === void 0 ? 'omni.config.js' : _d;
    return "'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst { requireCwd, logErr } = require('@omni-door/utils');\nconst { nodeResolve: resolve_new } = requireCwd('@rollup/plugin-node-resolve', true) || {};\nconst resolve_old = requireCwd('rollup-plugin-node-resolve', true);\nconst commonjs_new = requireCwd('@rollup/plugin-commonjs', true);\nconst commonjs_old = requireCwd('rollup-plugin-commonjs', true);\nconst { babel: babel_new } = requireCwd('@rollup/plugin-babel', true) || {};\nconst babel_old = requireCwd('rollup-plugin-babel', true);\nconst json_new = requireCwd('@rollup/plugin-json', true);\nconst json_old = requireCwd('rollup-plugin-json', true);\n" + (ts ? "const typescript_new = requireCwd('@rollup/plugin-typescript', true);\nconst typescript_old = requireCwd('rollup-plugin-typescript', true);\nconst typescript2 = requireCwd('rollup-plugin-typescript2');\n" : '') + "\nconst ppkj = requireCwd('./package.json');\nconst configFilePath = (ppkj && ppkj." + pkjFieldName + " && ppkj." + pkjFieldName + ".filePath) || './" + configFileName + "';\nconst configs = requireCwd(configFilePath);\n" + (configurationPath ? "const customConfig = require('" + configurationPath + "')\n" : '') + "\nconst babel = babel_new || babel_old;\nconst resolve = resolve_new || resolve_old;\nconst commonjs = commonjs_new || commonjs_old;\nconst json = json_new || json_old;\n" + (ts ? "const typescript = typescript_new || typescript_old;\n" : '') + "\nconst { build } = configs || {};\nconst { configuration = config => config } = build || {};\n\nconst extensions = ['.ts', '.js'];\nconst tsExcludes = ['**/__test__/*'];\nconst babelConfig = babel_new ? {\n  exclude: 'node_modules/**',\n  plugins: [['@babel/plugin-transform-runtime', { corejs: 3 }]],\n  babelHelpers: 'runtime',\n  extensions\n} : {\n  exclude: 'node_modules/**',\n  runtimeHelpers: true,\n  extensions\n};\nconst resolveConfig = {\n  extensions,\n  preferBuiltins: true,\n  browser: true\n};\nconst commonConfig = commonjs_new? void 0 : {\n  namedExports: {\n    'react': [\n      'Children',\n      'Component',\n      'PropTypes',\n      'createElement',\n      'createRef',\n      'createContext',\n      'PureComponent',\n      'cloneElement',\n      'memo',\n      'createFactory',\n      'isValidElement',\n      'forwardRef',\n      'Fragment',\n      'lazy',\n      'Suspense',\n      'SFC',\n      'FC',\n      'useState',\n      'useEffect',\n      'useContext',\n      'useReducer',\n      'useCallback',\n      'useMemo',\n      'useRef',\n      'useImperativeHandle',\n      'useLayoutEffect',\n      'useDebugValue'\n    ],\n    'react-dom': [\n      'render',\n      'hydrate',\n      'unmountComponentAtNode',\n      'findDOMNode',\n      'createPortal',\n      'renderToString',\n      'renderToStaticMarkup',\n      'renderToNodeStream',\n      'renderToStaticNodeStream'\n    ]\n  }\n};\n\nlet indexPath = '';\nconst exts = ['ts', 'tsx', 'jsx', 'js'];\nfor (let i = 0, len = exts.length; i < len; i++) {\n  indexPath = path.resolve('" + srcDir + "', `index.${exts[i]}`);\n  if (fs.existsSync(indexPath)) break;\n  if (i === len - 1) {\n    logErr('\u8BF7\u4EE5 index \u4E3A\u540D\u79F0\u6307\u5B9A\u6B63\u786E\u7684\u5165\u53E3\u6587\u4EF6\uFF01(Please specify the correct entry file with name of index)');\n    process.exit(1);\n  }\n}\n\nfunction flatten (arr) {\n  return arr.reduce(function(prev, next){\n    return prev.concat(Array.isArray(next) ? flatten(next) : next);\n  }, []);\n}\n\nfunction createConfig () {\n  const filesPaths = [];\n  " + (multiOutput ? "const files = fs.readdirSync('" + srcDir + "');\n  const len = files.length;\n  for (let i = 0; i < len; i++) {\n    const file = files[i];\n    const filePath = path.resolve('" + srcDir + "', file);\n    const stats = fs.statSync(filePath);\n    if (stats.isDirectory()) {\n      let entryPath = '';\n      for (let i = 0, len = exts.length; i < len; i++) {\n        entryPath = path.resolve(filePath, `index.${exts[i]}`);\n        if (fs.existsSync(entryPath)) break;\n      }\n      if (!fs.existsSync(entryPath) || fs.existsSync(path.resolve(filePath, '.buildignore'))) {\n        tsExcludes.push(`${filePath}/*`);\n        continue;\n      }\n      filesPaths.push({\n        entry: entryPath,\n        file: path.join(file, 'index.js'),\n        dir: file\n      });\n    }\n  }\n  " : '') + "\n  return [{\n    input: indexPath,\n    output: {\n      file: '" + outDir + "/index.js',\n      format: 'cjs',\n      exports: 'named',\n      compact: true\n    },\n    plugins: [\n      resolve(resolveConfig),\n      commonjs(commonConfig),\n      " + (ts ? "typescript2({\n        tsconfigOverride: {\n          compilerOptions: {\n            target: 'es5',\n            module: 'es2015'\n          },\n          exclude: tsExcludes\n        }\n      })," : '') + "\n      babel(babelConfig),\n      json()\n    ]}, " + (esmDir
        ? "{\n          input: indexPath,\n          output: {\n            file: '" + esmDir + "/index.js',\n            format: 'esm',\n            compact: true\n          },\n          plugins: [\n            resolve(resolveConfig),\n            commonjs(commonConfig),\n            json(),\n            " + (ts ? "typescript2({\n              tsconfigOverride: {\n                compilerOptions: {\n                  target: 'es5',\n                  module: 'es2015'\n                },\n                exclude: tsExcludes\n              }\n            })" : '') + "\n          ]\n        },"
        : '') + " ...flatten(filesPaths.map(fileParams => {\n      const { entry, file, dir } = fileParams\n      return [{\n        input: entry,\n        output: {\n          dir: path.resolve('" + outDir + "', dir),\n          format: 'cjs',\n          exports: 'named',\n          compact: true\n        },\n        plugins: [\n          resolve(resolveConfig),\n          commonjs(commonConfig),\n          " + (ts ? "typescript({\n            target: 'es5',\n            outDir: path.resolve('" + outDir + "', file),\n            exclude: tsExcludes\n          })," : '') + "\n          babel(babelConfig),\n          json()\n        ]\n      }, " + (esmDir
        ? "{\n            input: entry,\n            output: {\n              dir: path.resolve('" + esmDir + "', dir),\n              format: 'esm',\n              compact: true\n            },\n            plugins: [\n              resolve(resolveConfig),\n              commonjs(commonConfig),\n              json(),\n              " + (ts ? "typescript({\n                target: 'es5',\n                module: 'es2015',\n                outDir: path.resolve('" + esmDir + "', file),\n                exclude: tsExcludes\n              })" : '') + "\n            ]\n          }"
        : '') + "]\n    }))\n  ]\n};\n\nmodule.exports = " + (configurationPath
        ? 'customConfig'
        : 'configuration(createConfig());') + "\n";
}
exports.default = default_1;
