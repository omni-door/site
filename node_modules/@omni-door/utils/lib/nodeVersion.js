"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var shelljs_1 = __importDefault(require("shelljs"));
var logger_1 = require("./logger");
var VERSION_MATCH_DICT = [
    // specified-node-version compare to current-node-version
    {
        // first layer
        big: false,
        equal: void 0,
        small: true
    },
    {
        // second layer
        big: false,
        equal: void 0,
        small: true
    },
    {
        // third layer
        big: false,
        equal: true,
        small: true
    }
];
function nodeVersion(v) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (!v)
                return [2 /*return*/, Promise.resolve(false)];
            return [2 /*return*/, new Promise(function (resolve) {
                    shelljs_1.default.exec('node -v', {
                        async: true,
                        silent: true
                    }, function (code, stdout, stderr) {
                        if (code !== 0) {
                            logger_1.logWarn(stderr || stdout);
                            return resolve(false);
                        }
                        else {
                            var isValid = false;
                            var regs = [reg_version(0), reg_version(1), reg_version(2)];
                            for (var _i = 0, regs_1 = regs; _i < regs_1.length; _i++) {
                                var reg = regs_1[_i];
                                if (reg.test(v)) {
                                    isValid = true;
                                    break;
                                }
                            }
                            if (isValid) {
                                var currentV = stdout.substr(1).trim();
                                var c_v_arr = currentV.split('.');
                                var v_arr = v.split('.');
                                var isMatch = true;
                                for (var i = 0; i < v_arr.length; i++) {
                                    var state = +v_arr[i] > +c_v_arr[i]
                                        ? 'big'
                                        : +v_arr[i] === +c_v_arr[i]
                                            ? 'equal'
                                            : 'small';
                                    var layer = VERSION_MATCH_DICT[i];
                                    if (layer[state] !== void 0) {
                                        // the state was determination
                                        !layer[state] && (isMatch = false);
                                        break;
                                    }
                                }
                                return resolve(isMatch);
                            }
                            resolve(false);
                        }
                    });
                }).catch(function (err) { return logger_1.logWarn(err); })];
        });
    });
}
function reg_version(vlevel) {
    var regs = [
        new RegExp(/^(\d+).(\d+).(\d+)$/),
        new RegExp(/^(\d+).(\d+)$/),
        new RegExp(/^(\d+)$/)
    ];
    return regs[vlevel];
}
function nodeVersionCheck(v) {
    return __awaiter(this, void 0, void 0, function () {
        var res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, nodeVersion(v)];
                case 1:
                    res = _a.sent();
                    if (!res) {
                        logger_1.logWarn("\u8BF7\u5C06 node \u7248\u672C\u5347\u7EA7\u81F3 " + v + " \u4EE5\u4E0A (Please upgrade the node version to " + v + " or above)");
                        return [2 /*return*/, process.exit(0)];
                    }
                    return [2 /*return*/, true];
            }
        });
    });
}
exports.default = nodeVersionCheck;
