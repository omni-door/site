{"ast":null,"code":"const isObject = param => param === Object(param);\n\nconst paramsToStringList = entries => entries.reduce((result, [key, value]) => result.concat(Array.isArray(value) ? paramsToStringList(value.map(arrayValue => [`${key}[]`, arrayValue])) : [typeof value === 'string' || typeof value === 'number' ? `${key}=${value}` : '']), []);\n\nexport default function paramsToQueryString(params) {\n  const paramsString = isObject(params) ? paramsToStringList(Object.keys(params).sort().map(key => [String(key), params[key]])).filter(chunk => chunk.length > 0).join('&') : '';\n  return paramsString.length > 0 ? `?${paramsString}` : '';\n}","map":{"version":3,"sources":["/Users/han/Desktop/GitHub/omni-site/src/utils/paramsToQueryString.ts"],"names":["isObject","param","Object","paramsToStringList","entries","reduce","result","key","value","concat","Array","isArray","map","arrayValue","paramsToQueryString","params","paramsString","keys","sort","String","filter","chunk","length","join"],"mappings":"AAAA,MAAMA,QAAQ,GAAIC,KAAD,IACfA,KAAK,KAAKC,MAAM,CAACD,KAAD,CADlB;;AAIA,MAAME,kBAAkB,GAAIC,OAAD,IACzBA,OAAO,CAACC,MAAR,CACE,CAACC,MAAD,EAAmB,CAACC,GAAD,EAAMC,KAAN,CAAnB,KACEF,MAAM,CAACG,MAAP,CAAcC,KAAK,CAACC,OAAN,CAAcH,KAAd,IACVL,kBAAkB,CAClBK,KAAK,CAACI,GAAN,CAAWC,UAAD,IAAoC,CAAE,GAAEN,GAAI,IAAR,EAAaM,UAAb,CAA9C,CADkB,CADR,GAIV,CAAC,OAAOL,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAA9C,GAA0D,GAAED,GAAI,IAAGC,KAAM,EAAzE,GAA6E,EAA9E,CAJJ,CAFJ,EAOE,EAPF,CADF;;AAYA,eAAe,SAASM,mBAAT,CAA6BC,MAA7B,EAAkD;AAC/D,QAAMC,YAAoB,GAAGhB,QAAQ,CAACe,MAAD,CAAR,GACzBZ,kBAAkB,CAClBD,MAAM,CAACe,IAAP,CAAYF,MAAZ,EACGG,IADH,GAEGN,GAFH,CAEQL,GAAD,IAAyC,CAACY,MAAM,CAACZ,GAAD,CAAP,EAAcQ,MAAM,CAACR,GAAD,CAApB,CAFhD,CADkB,CAAlB,CAKCa,MALD,CAKSC,KAAD,IAA4BA,KAAK,CAACC,MAAN,GAAe,CALnD,EAMCC,IAND,CAMM,GANN,CADyB,GAQzB,EARJ;AAUA,SAAOP,YAAY,CAACM,MAAb,GAAsB,CAAtB,GAA2B,IAAGN,YAAa,EAA3C,GAA+C,EAAtD;AACD","sourcesContent":["const isObject = (param: any): boolean =>\n  param === Object(param);\n\n\nconst paramsToStringList = (entries: [string, any][]): string[] =>\n  entries.reduce(\n    (result: string[], [key, value]: [string, any]): string[] =>\n      result.concat(Array.isArray(value)\n        ? paramsToStringList(\n          value.map((arrayValue: any): [string, any] => [`${key}[]`, arrayValue])\n        )\n        : [typeof value === 'string' || typeof value === 'number' ? `${key}=${value}` : '']),\n    []\n  )\n  ;\n\nexport default function paramsToQueryString(params: any): string {\n  const paramsString: string = isObject(params)\n    ? paramsToStringList(\n      Object.keys(params)\n        .sort()\n        .map((key: string | number): [string, any] => [String(key), params[key]])\n    )\n      .filter((chunk: string): boolean => chunk.length > 0)\n      .join('&')\n    : ''\n    ;\n  return paramsString.length > 0 ? `?${paramsString}` : '';\n}"]},"metadata":{},"sourceType":"module"}