{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar isObject = function isObject(param) {\n  return param === Object(param);\n};\n\nvar paramsToStringList = function paramsToStringList(entries) {\n  return entries.reduce(function (result, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    return result.concat(Array.isArray(value) ? paramsToStringList(value.map(function (arrayValue) {\n      return [\"\".concat(key, \"[]\"), arrayValue];\n    })) : [typeof value === 'string' || typeof value === 'number' ? \"\".concat(key, \"=\").concat(value) : '']);\n  }, []);\n};\n\nexport default function paramsToQueryString(params) {\n  var paramsString = isObject(params) ? paramsToStringList(Object.keys(params).sort().map(function (key) {\n    return [String(key), params[key]];\n  })).filter(function (chunk) {\n    return chunk.length > 0;\n  }).join('&') : '';\n  return paramsString.length > 0 ? \"?\".concat(paramsString) : '';\n}","map":{"version":3,"sources":["/Users/han/Desktop/GitHub/omni-site/src/utils/paramsToQueryString.ts"],"names":["isObject","param","Object","paramsToStringList","entries","reduce","result","key","value","concat","Array","isArray","map","arrayValue","paramsToQueryString","params","paramsString","keys","sort","String","filter","chunk","length","join"],"mappings":";;AAAA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;AAAA,SACfA,KAAK,KAAKC,MAAM,CAACD,KAAD,CADD;AAAA,CAAjB;;AAIA,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,OAAD;AAAA,SACzBA,OAAO,CAACC,MAAR,CACE,UAACC,MAAD;AAAA;AAAA,QAAoBC,GAApB;AAAA,QAAyBC,KAAzB;;AAAA,WACEF,MAAM,CAACG,MAAP,CAAcC,KAAK,CAACC,OAAN,CAAcH,KAAd,IACVL,kBAAkB,CAClBK,KAAK,CAACI,GAAN,CAAU,UAACC,UAAD;AAAA,aAAoC,WAAIN,GAAJ,SAAaM,UAAb,CAApC;AAAA,KAAV,CADkB,CADR,GAIV,CAAC,OAAOL,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAA9C,aAA4DD,GAA5D,cAAmEC,KAAnE,IAA6E,EAA9E,CAJJ,CADF;AAAA,GADF,EAOE,EAPF,CADyB;AAAA,CAA3B;;AAYA,eAAe,SAASM,mBAAT,CAA6BC,MAA7B,EAAkD;AAC/D,MAAMC,YAAoB,GAAGhB,QAAQ,CAACe,MAAD,CAAR,GACzBZ,kBAAkB,CAClBD,MAAM,CAACe,IAAP,CAAYF,MAAZ,EACGG,IADH,GAEGN,GAFH,CAEO,UAACL,GAAD;AAAA,WAAyC,CAACY,MAAM,CAACZ,GAAD,CAAP,EAAcQ,MAAM,CAACR,GAAD,CAApB,CAAzC;AAAA,GAFP,CADkB,CAAlB,CAKCa,MALD,CAKQ,UAACC,KAAD;AAAA,WAA4BA,KAAK,CAACC,MAAN,GAAe,CAA3C;AAAA,GALR,EAMCC,IAND,CAMM,GANN,CADyB,GAQzB,EARJ;AAUA,SAAOP,YAAY,CAACM,MAAb,GAAsB,CAAtB,cAA8BN,YAA9B,IAA+C,EAAtD;AACD","sourcesContent":["const isObject = (param: any): boolean =>\n  param === Object(param);\n\n\nconst paramsToStringList = (entries: [string, any][]): string[] =>\n  entries.reduce(\n    (result: string[], [key, value]: [string, any]): string[] =>\n      result.concat(Array.isArray(value)\n        ? paramsToStringList(\n          value.map((arrayValue: any): [string, any] => [`${key}[]`, arrayValue])\n        )\n        : [typeof value === 'string' || typeof value === 'number' ? `${key}=${value}` : '']),\n    []\n  )\n  ;\n\nexport default function paramsToQueryString(params: any): string {\n  const paramsString: string = isObject(params)\n    ? paramsToStringList(\n      Object.keys(params)\n        .sort()\n        .map((key: string | number): [string, any] => [String(key), params[key]])\n    )\n      .filter((chunk: string): boolean => chunk.length > 0)\n      .join('&')\n    : ''\n    ;\n  return paramsString.length > 0 ? `?${paramsString}` : '';\n}"]},"metadata":{},"sourceType":"module"}