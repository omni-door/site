import exec from './exec';
import { logDetail, logEmph, logErr, logInfo, logSuc, logCongrat, logWarn, logTime, underline, italic } from './logger';
import { getDependency, arr2str, intersection } from './dependencies';
import pkgNameCheck from './pkgName';
import nodeVersionCheck from './nodeVersion';
import npmVersionCheck, { getNpmVersion } from './npmVersion';
import outputFile from './outputFile';
import { tplEngineInit, tplEngineNew, _typeof } from './tplEngine';
import requireCwd from './requireCwd';
import { isInGitRepository, tryGitInit } from './gitHandlers';
import updateNotifier from './updateNotifier';
export { default as exec } from './exec';
export { default as logPrefix, setLogo, setBrand, getLogo, getBrand } from './logPrefix';
export { logDetail, logEmph, logErr, logInfo, logSuc, logWarn, logTime, logCongrat, underline, italic } from './logger';
export { getDependency, arr2str, intersection } from './dependencies';
export { default as pkgNameCheck } from './pkgName';
export { default as nodeVersionCheck } from './nodeVersion';
export { default as npmVersionCheck, getNpmVersion, getNpmVersions } from './npmVersion';
export { default as outputFile } from './outputFile';
export { default as spinner } from './spinner';
export { tplEngineInit, tplEngineNew, _typeof } from './tplEngine';
export { default as requireCwd } from './requireCwd';
export { isInGitRepository, tryGitInit } from './gitHandlers';
export { default as updateNotifier } from './updateNotifier';
export type { BUILD, PKJTOOL, PLUGINSTAGE, PROJECT_TYPE, STRATEGY, STYLE, LAYOUT, LOGLEVEL, MARKDOWN, SPASERVER, COMPONENTSERVER, SSRSERVER, TESTFRAME, HASH } from './global.d';
declare const _default: {
    exec: typeof exec;
    logPrefix: () => string;
    setLogo: (logo: string) => void;
    setBrand: (brand: string) => void;
    getLogo: () => string;
    getBrand: () => string;
    logDetail: typeof logDetail;
    logEmph: typeof logEmph;
    logErr: typeof logErr;
    logInfo: typeof logInfo;
    logSuc: typeof logSuc;
    logWarn: typeof logWarn;
    logCongrat: typeof logCongrat;
    logTime: typeof logTime;
    underline: typeof underline;
    italic: typeof italic;
    pkgNameCheck: typeof pkgNameCheck;
    nodeVersionCheck: typeof nodeVersionCheck;
    npmVersionCheck: typeof npmVersionCheck;
    getNpmVersion: typeof getNpmVersion;
    outputFile: typeof outputFile;
    getDependency: typeof getDependency;
    arr2str: typeof arr2str;
    intersection: typeof intersection;
    spinner: import("./spinner").Spinner;
    tplEngineInit: typeof tplEngineInit;
    tplEngineNew: typeof tplEngineNew;
    _typeof: typeof _typeof;
    requireCwd: typeof requireCwd;
    isInGitRepository: typeof isInGitRepository;
    tryGitInit: typeof tryGitInit;
    updateNotifier: typeof updateNotifier;
};
export default _default;
